---
title: "JustReinvest_BOCSAR_LGA_Custody"
format: html
editor: visual
packages:
  - shiny
  - leaflet
  - sf
  - dplyr
  - viridis
  - DT
  - tidyverse
  - readxl
---

rsconnect::deployApp("/Users/Current/Desktop/Good_Data_Institute/JustReinvest/code/Demo_BOCSAR_LGA_Shiny", account = "ofor22", server = "shinyapps.io")

rsconnect::deployApp("/Users/Current/Desktop/Good_Data_Institute/JustReinvest/code/Demo_BOCSAR_LGA_Shiny")

```{r}
# Load required libraries
library(shiny)
library(leaflet)
library(sf)
library(dplyr)
library(viridis)
library(DT)
library(terra)
library(raster)

library(tidyverse)
library(readxl)

library(dplyr)
```

```{r}
LGA_custody_raw <- read_excel("/Users/Current/Desktop/Good_Data_Institute/JustReinvest/data/BOCSAR/Aboriginal contacts with the Criminal Justice System by Local Government Area 2022-2023.xlsx",sheet = 8, range = "A6:G138")

View(LGA_custody_raw)

head(LGA_custody_raw)


LGA_shapes <- st_read("/Users/Current/Desktop/Good_Data_Institute/JustReinvest/data/LGA_2023_AUST_GDA2020")

```

# Fix LGA names

```{r}
# Create a mapping of LGA names
lga_name_mapping <- c(
  "Bathurst Regional" = "Bathurst",
  "Central Coast" = "Central Coast (NSW)",
  "Coffs Harbour" = "Coffs Harbour",
  "Dubbo Regional" = "Dubbo",
  "Mid-Western Regional" = "Mid-Western",
  "Queanbeyan-Palerang Regional" = "Queanbeyan-Palerang",
  "Snowy Monaro Regional" = "Snowy Monaro",
  "Upper Hunter Shire" = "Upper Hunter",
  "Port Macquarie-Hastings" = "Port Macquarie-Hastings",
  "Glen Innes Severn" = "Glen Innes Severn",
  "Liverpool Plains" = "Liverpool Plains",
  "Tamworth Regional" = "Tamworth",
  "Byron" = "Byron",
  "Richmond Valley" = "Richmond Valley",
  "Cootamundra-Gundagai" = "Cootamundra-Gundagai",
  "Snowy Valleys" = "Snowy Valleys",
  "The Hills Shire" = "The Hills",
  "Bayside" = "Bayside (NSW)",
  "Inner West" = "Inner West",
  "Northern Beaches" = "Northern Beaches",
  "Campbelltown" = "Campbelltown (NSW)",
  "Sutherland Shire" = "Sutherland",
  "Upper Lachlan Shire" = "Upper Lachlan",
  "Greater Hume Shire" = "Greater Hume",
  "Warrumbungle Shire" = "Warrumbungle"
)

# Function to standardize LGA names
standardize_lga_name <- function(name) {
  # Remove " (NSW)" from the end of names
  name <- sub(" \\(NSW\\)$", "", name)
  
  # Check if the name is in our mapping
  if (name %in% names(lga_name_mapping)) {
    return(lga_name_mapping[name])
  }
  
  # If not in mapping, return the original name
  return(name)
}

# Apply the standardization to both datasets
LGA_custody_raw$LGA_standardized <- sapply(LGA_custody_raw$LGA, standardize_lga_name)
LGA_shapes$LGA_NAME23_standardized <- sapply(LGA_shapes$LGA_NAME23, standardize_lga_name)

# Check for any remaining mismatches
mismatches <- setdiff(LGA_custody_raw$LGA_standardized, LGA_shapes$LGA_NAME23_standardized)
print("Remaining mismatches:")
print(mismatches)

# If there are mismatches, you may need to add more mappings to the lga_name_mapping vector

save(LGA_custody_raw, file = "LGA_custody_raw")
save(LGA_shapes, file = "LGA_shapes")


# Simplify the polygons
LGA_shapes_simplified <- st_simplify(LGA_shapes, preserveTopology = T, dTolerance = 0.01)
LGA_shapes_simplified <- st_cast(LGA_shapes_simplified, "MULTIPOLYGON")

save(LGA_shapes_simplified, file = "LGA_shapes_simplified")

```

```{r}

# Load required libraries
library(sf)
library(dplyr)
library(rmapshaper)

# Load the raw data
load("LGA_custody_raw")
load("LGA_shapes")

# Filter for NSW LGAs and join with custody data
NSW_LGAs <- LGA_shapes %>%
  filter(STE_NAME21 == "New South Wales") %>%
  left_join(LGA_custody_raw, by = c("LGA_NAME23_standardized" = "LGA_standardized"))

# Simplify the geometries using rmapshaper
NSW_LGAs_simplified <- ms_simplify(NSW_LGAs, keep = 0.05, keep_shapes = TRUE)

# Check the size reduction
print(object.size(NSW_LGAs), units = "Mb")
print(object.size(NSW_LGAs_simplified), units = "Mb")

# Replace the original NSW_LGAs with the simplified version
NSW_LGAs <- NSW_LGAs_simplified

# Pre-compute all necessary values
NSW_LGAs_precomputed <- NSW_LGAs %>%
  mutate(
    Rate_2022 = round(`2022/Dec` / as.numeric(`Aboriginal census population aged 18+`) * 100000, 1),
    Rate_2023 = round(as.numeric(gsub(",", "", `2023 Rate per 100,000`)), 1),
    PrisonerCount_2022 = `2022/Dec`,
    PrisonerCount_2023 = `2023/Dec`
  ) %>%
  dplyr::select(LGA_NAME23_standardized, PrisonerCount_2022, PrisonerCount_2023, Rate_2022, Rate_2023, geometry)



NSW_LGAs_precomputed <- st_as_sf(NSW_LGAs_precomputed)
NSW_LGAs_precomputed <- st_transform(NSW_LGAs_precomputed, 4326)

# Save the preprocessed data
save(NSW_LGAs_precomputed, file = "NSW_LGAs_precomputed")




```

-   get LGA shapefile

-   create basic Shiny app

-   When LGA selected, plots / EDA on side + hypothetical cost reduction tool...

```{r}
# 
# Load pre-computed, simplified data
load("NSW_LGAs_precomputed.RData")

# UI
ui <- fluidPage(
  titlePanel("NSW Indigenous Incarceration Rates"),
  sidebarLayout(
    sidebarPanel(
      selectInput("lga_select", "Select LGA:", choices = sort(unique(NSW_LGAs$LGA_NAME23_standardized))),
      sliderInput("reduction_percent", "Percentage Reduction:", min = 0, max = 100, value = 0, step = 1),
      verbatimTextOutput("cost_savings_detail"),
      width = 4
    ),
    mainPanel(
      radioButtons("map_type", "Map Type:",
                   choices = c("Prisoner Count (2022)" = "2022",
                               "Prisoner Count (2023)" = "2023",
                               "Rate per 100,000 (2022)" = "rate2022",
                               "Rate per 100,000 (2023)" = "rate2023")),
      leafletOutput("map", height = "500px"),
      DTOutput("lga_table"),
      width = 8
    )
  )
)

# Server
server <- function(input, output, session) {
  
  # Reactive values
  selected_data <- reactive({
    if (input$map_type == "2022") {
      return(list(col = NSW_LGAs_precomputed$PrisonerCount_2022, title = "Indigenous Prisoner Count (2022)", suffix = ""))
    } else if (input$map_type == "2023") {
      return(list(col = NSW_LGAs_precomputed$PrisonerCount_2023, title = "Indigenous Prisoner Count (2023)", suffix = ""))
    } else if (input$map_type == "rate2022") {
      return(list(col = NSW_LGAs_precomputed$Rate_2022, title = "Rate per 100,000 (2022)", suffix = " per 100,000"))
    } else {
      return(list(col = NSW_LGAs_precomputed$Rate_2023, title = "Rate per 100,000 (2023)", suffix = " per 100,000"))
    }
  })
  
  # Leaflet map
  output$map <- renderLeaflet({
    pal <- colorNumeric(palette = "viridis", domain = selected_data()$col)
    
    leaflet(NSW_LGAs_precomputed) %>%
      addTiles() %>%
      addPolygons(
        fillColor = ~pal(selected_data()$col),
        weight = 2,
        opacity = 1,
        color = "white",
        dashArray = "3",
        fillOpacity = 0.7,
        highlight = highlightOptions(
          weight = 5,
          color = "#666",
          dashArray = "",
          fillOpacity = 0.7,
          bringToFront = TRUE
        ),
        label = ~sprintf(
          "<strong>%s</strong><br/>%s: %s%s",
          LGA_NAME23_standardized,
          selected_data()$title,
          formatC(selected_data()$col, format="f", digits=1, big.mark=","),
          selected_data()$suffix
        ) %>% lapply(htmltools::HTML),
        labelOptions = labelOptions(
          style = list("font-weight" = "normal", padding = "3px 8px"),
          textsize = "15px",
          direction = "auto"
        ),
        layerId = ~LGA_NAME23_standardized
      ) %>%
      addLegend(pal = pal, values = selected_data()$col, opacity = 0.7, title = selected_data()$title,
                position = "bottomright")
  })
  
  # LGA info table
  output$lga_table <- renderDT({
  selected_lga <- NSW_LGAs_precomputed[NSW_LGAs_precomputed$LGA_NAME23_standardized == input$lga_select, ]
  data.frame(
    Metric = c("Indigenous Prisoner Count (2022)", "Indigenous Prisoner Count (2023)", 
               "Rate per 100,000 (2022)", "Rate per 100,000 (2023)"),
    Value = c(selected_lga$PrisonerCount_2022, selected_lga$PrisonerCount_2023, 
              selected_lga$Rate_2022, selected_lga$Rate_2023)
  )
}, options = list(dom = 't', pageLength = -1))
  
  # Cost savings calculation with detailed information
  output$cost_savings_detail <- renderText({
    selected_lga <- NSW_LGAs_precomputed[NSW_LGAs_precomputed$LGA_NAME23_standardized == input$lga_select, ]
    prisoners_2023 <- selected_lga$PrisonerCount_2023
    daily_cost <- 298  # Cost per prisoner per day - this could reference a specific table from ROGS
    annual_cost <- prisoners_2023 * daily_cost * 365
    reduction <- prisoners_2023 * (input$reduction_percent / 100)
    prisoners_after_reduction <- round(prisoners_2023 - reduction)
    savings <- (prisoners_2023 - prisoners_after_reduction) * daily_cost * 365
    
    paste0(
      "Number of Indigenous prisoners ", 
      "in 2023: ", format(prisoners_2023, big.mark = ","), "\n",
      "Annual estimated cost of ", 
      "incarceration: $", format(round(annual_cost), big.mark = ","), "\n",
      "Expected cost saving of ", 
      input$reduction_percent, "% reduction: $", 
      format(round(savings), big.mark = ","), "\n",
      "Number of prisoners after ", 
      input$reduction_percent, "% reduction: ", 
      format(round(prisoners_after_reduction), big.mark = ","),
      "\n \nBased on an estimated daily cost \nper prisoner of $", daily_cost
    )
  })
  
  # Update selected LGA when clicking on the map
  observeEvent(input$map_shape_click, {
    click <- input$map_shape_click
    if (!is.null(click)) {
      updateSelectInput(session, "lga_select", selected = click$id)
    }
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```
